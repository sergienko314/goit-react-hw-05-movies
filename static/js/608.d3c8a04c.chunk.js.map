{"version":3,"file":"static/js/608.d3c8a04c.chunk.js","mappings":"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","sources":["components/TrendList/TrendList.jsx","webpack://goit-react-hw-05-movies/./src/pages/Movies/Movies.module.css?82ee","pages/Movies/Movies.jsx","utils/ApiFilmes.jsx"],"sourcesContent":["import { Link, useLocation } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\n\n\nconst TrendList = ({ filmes }) => {\n\n  const location = useLocation()\n\n  return filmes.map(({ poster_path, title, name, id }) => {\n    return (\n        <Link key={id} state={location} to={`/movies/${id}`}>\n      <div >\n        <img\n          src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n          alt={title || name}\n                width='200px'>\n            </img>\n            <h2>{title || name}</h2>\n              </div>\n           </Link >\n    );\n  });\n};\nTrendList.propTypes = PropTypes.shape({\n    poster_path: PropTypes.string,\n  title: PropTypes.string,\n  name: PropTypes.string,\n   id: PropTypes.string,\n})\n  \nexport default TrendList;\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"serchForm\":\"Movies_serchForm__V21Mu\",\"buttonSerch\":\"Movies_buttonSerch__-UhCh\",\"input\":\"Movies_input__KrUqs\"};","import TrendList from 'components/TrendList/TrendList';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport apiGet from 'utils/ApiFilmes';\nimport style from \"./Movies.module.css\";\nconst Movies = () => {\n    const [input, setInput] = useState('');\n    const [filmList, setFilmList] = useState([])\n    const [searchParams, setSearchParams] = useSearchParams()\n    \n    const query = searchParams.get('input')\n    \n    useEffect(() => {\n       if (!query) return;\n        const fn = async () => {\n            try {\n        const apiArray = await apiGet.getCinemaByName(query)\n        setFilmList(apiArray)\n    } catch (error) {\n        return alert({ error })\n            }\n        }\n        fn()\n} , [query] )\n\nconst handleSubmit = (e) => {\n    e.preventDefault();\n    const userInput = input.trim();\n    if (userInput === '') {\n        return alert('fill in the fields');\n    }\n    setSearchParams({input: userInput})\n};\n    return (\n        <>\n        <div className={style.serchForm} >\n        <form onSubmit={handleSubmit} >\n            <input\n                onChange={(e) => setInput(e.target.value)}\n                className={style.input}\n                type=\"text\"\n            />\n            <button type='submit' className={style.buttonSerch}>üîé</button>\n        </form>\n    </div>\n       { filmList.length > 0 && <TrendList  filmes={filmList}/> }\n        </>\n     \n);\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst API_KEY = '1775dc36af6d9d988a7c29bf2a17d1bc';\nconst URL = 'https://api.themoviedb.org/3/trending/all/day';\nconst URL_SEARCH_BY_NAME = 'https://api.themoviedb.org/3/search/movie';\nconst URL_SEARCH_BY_ID = 'https://api.themoviedb.org/3/movie';\n\n// get popular cinema\nasync function getDataPopularCinema() {\n  axios.defaults.params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  try {\n    const { data } = await axios.get(`${URL}`);\n    // (data);\n    return data.results;\n  } catch (error) {}\n}\n\n// –ø–æ–∏—Å–∫ –ø–æ name —Ñ–∏–ª—å–º–∞ –Ω–∞ –∞–ø–∏ themoviedb\nasync function getDataByName(name) {\n  axios.defaults.params = {\n    api_key: API_KEY,\n    language: 'en-US',\n    query: `${name}`,\n  };\n  try {\n    const { data } = await axios.get(`${URL_SEARCH_BY_NAME}`);\n    return data.results;\n  } catch (error) {}\n}\n\n// get by id cinema\nasync function getDataById(id) {\n  axios.defaults.params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  try {\n    console.log(URL_SEARCH_BY_ID);\n    const { data } = await axios.get(`${URL_SEARCH_BY_ID}/${id}`);\n\n    return data;\n  } catch (error) {}\n}\n\n// search actor by id\nasync function getDataActorById(id) {\n  axios.defaults.params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  try {\n    const { data } = await axios.get(`${URL_SEARCH_BY_ID}/${id}/credits`);\n    return data.cast;\n  } catch (error) {}\n}\n\n// search reviews by id\nasync function getDataReviewsById(id) {\n  axios.defaults.params = {\n    api_key: API_KEY,\n    language: 'en-US',\n    page: 1,\n  };\n  try {\n    const { data } = await axios.get(`${URL_SEARCH_BY_ID}/${id}/reviews`);\n    return data.results;\n  } catch (error) {}\n}\n\nconst apiGet = {\n  popular: getDataPopularCinema,\n  movieById: getDataById,\n  getReviews: getDataReviewsById,\n  getCharacter: getDataActorById,\n  getCinemaByName: getDataByName,\n};\n\nexport default apiGet;\n"],"names":["filmes","location","useLocation","map","poster_path","title","name","id","state","to","src","alt","width","useState","input","setInput","filmList","setFilmList","useSearchParams","searchParams","setSearchParams","query","get","useEffect","fn","apiGet","apiArray","alert","error","className","style","onSubmit","e","preventDefault","userInput","trim","onChange","target","value","type","length","TrendList","API_KEY","URL","URL_SEARCH_BY_NAME","URL_SEARCH_BY_ID","axios","api_key","language","data","results","console","log","cast","getDataReviewsById","page","popular","getDataPopularCinema","movieById","getDataById","getReviews","getCharacter","getDataActorById","getCinemaByName","getDataByName"],"sourceRoot":""}